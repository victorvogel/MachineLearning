# -*- coding: utf-8 -*-
"""NBAstats.victor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16xs792XtRVBz-BOkSGByZ8WjPPvFhD71
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

file_name = list(uploaded.keys())[0]
nba_data = pd.read_csv(file_name)

#Classificar jogadores como "Elite" (PTS >= 20) ou "Não Elite"
nba_data['Class'] = np.where(nba_data['PTS'] >= 20, 1, 0)

print("Distribuição das classes:")
print(nba_data['Class'].value_counts())

colors = ['red', 'blue']
labels = ['Não Elite', 'Elite']


sns.countplot(x='Class', data=nba_data, palette=colors)
plt.title("Distribuição de Classes (Elite x Não Elite)")
plt.xticks(ticks=[0, 1], labels=labels)
plt.xlabel("Categoria")
plt.ylabel("Contagem")
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X = nba_data[['PTS', 'AST', 'STL', 'BLK']]
y = nba_data['Class']

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

X = nba_data[["AST", "3PTS", "BLK", "STL"]]
y = nba_data["Class"]

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Acurácia: ", accuracy)
print("Precisão (Precision): ", precision)
print("Recall: ", recall)
print("F1-Score: ", f1)

print("\nRelatório de Classificação Detalhado:")
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Não Elite", "Elite"], yticklabels=["Não Elite", "Elite"])
plt.xlabel("Previsão")
plt.ylabel("Real")
plt.title("Matriz de Confusão")
plt.show()

report = classification_report(y_test, y_pred, target_names=["Não Elite", "Elite"])
print("Relatório de Classificação:")
print(report)

X = nba_data[["AST", "3PTS", "BLK", "STL"]]
y = nba_data["Class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Tamanho do conjunto de treino: {len(X_train)} amostras")
print(f"Tamanho do conjunto de teste: {len(X_test)} amostras")